head(FGC_tsne)
sample_color <- sapply(strsplit(as.character(rownames(FGC_tsne)),"_"), "[[",2)
sample_shape <- sapply(strsplit(as.character(rownames(FGC_tsne)),"_"), "[[",1)
t <- data.frame(x=FGC_tsne$tSNE_1,y=FGC_tsne$tSNE_2,color=sample_color,shape=sample_shape)
theme<-theme(panel.background = element_blank(),panel.border=element_rect(fill=NA),panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),strip.background=element_blank(),axis.text.x=element_text(colour="black"),
axis.text.y=element_text(colour="black"),axis.ticks=element_line(colour="black"),plot.margin=unit(c(5,1,1,1),"line"))
#pdf("FGC_tSNE_color_shape.pdf",10,9)
ggplot(t,aes(x,y,color=color,shape=shape))+ #scale_colour_manual(values=cols(10)[1:10])+
geom_point(size=3) + labs(x="tsne1",y="tsne2", title="FGC_tSNE") + theme
FGC_female <- read.table("FGC_female_Seurat_coordinate.xls",header=T,row.names = 1)
head(FGC_female)
FGC_female$color <- FGC_female$ident
FGC_female$cluster <- FGC_female$ident
FGC_female$week <- sapply(strsplit(as.character(rownames(FGC_female)),"_"), "[[",2)
head(FGC_female)
FGC_female[FGC_female$ident==0,]$color <- FGC_color[1]
FGC_female[FGC_female$ident==1,]$color <- FGC_color[1]
FGC_female[FGC_female$ident==2,]$color <- FGC_color[2]
FGC_female[FGC_female$ident==3,]$color <- FGC_color[3]
FGC_female[FGC_female$ident==4,]$color <- FGC_color[4]
FGC_female[FGC_female$ident==0,]$cluster <- 'C1_Mitotic'
FGC_female[FGC_female$ident==1,]$cluster <- 'C1_Mitotic'
FGC_female[FGC_female$ident==2,]$cluster <- 'C2_RA'
FGC_female[FGC_female$ident==4,]$cluster <- 'C4_Oogenesis'
#pdf("FGC_tsne_female_map.pdf",10,9)
plot(FGC_tsne$tSNE_1,FGC_tsne$tSNE_2,pch=19,col='grey',xlab="tsne1",ylab = "tsne2",cex=1.5)
points(FGC_tsne[as.vector(as.character(rownames(FGC_female))),]$tSNE_1,FGC_tsne[as.vector(as.character(rownames(FGC_female))),]$tSNE_2,
col=FGC_female$color,pch=19,cex=1.5)
plot(FGC_tsne$tSNE_1,FGC_tsne$tSNE_2,pch=19,col='grey',xlab="tsne1",ylab = "tsne2",cex=1.5)
points(FGC_tsne[as.vector(as.character(rownames(FGC_female))),]$tSNE_1,FGC_tsne[as.vector(as.character(rownames(FGC_female))),]$tSNE_2,
col=FGC_female$color,pch=19,cex=1.5)
legend(ncol=1,"bottomleft",
c('Mitotic','RA','Meiotic','Oogenesis'),
fill=FGC_color[1:4],
border=FGC_color[1:4])
plot(FGC_female$tSNE_1,FGC_female$tSNE_2,pch=19,col=FGC_female$color,xlab="tsne1",ylab = "tsne2",cex=1.5)
legend(ncol=1,"bottomleft",
c('Mitotic','RA','Meiotic','Oogenesis'),
fill=FGC_color[1:4],
border=FGC_color[1:4])
```{r}
female_week <- sort(unique(FGC_female$week))
female_cluster <- sort(unique(FGC_female$cluster))
female_sum_week <- c()
for(w in female_week){
sum_cluster <- c()
for(c in female_cluster){
temp_c <- sum(FGC_female[FGC_female$week==w,]$cluster==c)
sum_cluster <- c(sum_cluster,temp_c)
}
female_sum_week <- cbind(female_sum_week,sum_cluster)
}
rownames(female_sum_week) <- female_cluster
colnames(female_sum_week) <- female_week
female_sum_week
barplot(t(female_sum_week),col=brewer.pal(length(female_week),"Set1"),border="white",legend.text=female_week)
par(mfrow = c(1, 2))
barplot(female_sum_week,col=FGC_color[1:4],border="white",legend.text=female_cluster)
female_sum_week_per <- t(t(female_sum_week)/colSums(female_sum_week))
barplot(female_sum_week_per,col=FGC_color[1:4],border="white")
FGC_female[FGC_female$ident==0,]$cluster <- 'C1_Mitotic'
FGC_female[FGC_female$ident==1,]$cluster <- 'C1_Mitotic'
FGC_female[FGC_female$ident==2,]$cluster <- 'C2_RA'
FGC_female[FGC_female$ident==3,]$cluster <- 'C3_Meiotic'
FGC_female[FGC_female$ident==4,]$cluster <- 'C4_Oogenesis'
female_week <- sort(unique(FGC_female$week))
female_cluster <- sort(unique(FGC_female$cluster))
female_cluster
female_sum_week <- c()
for(w in female_week){
sum_cluster <- c()
for(c in female_cluster){
temp_c <- sum(FGC_female[FGC_female$week==w,]$cluster==c)
sum_cluster <- c(sum_cluster,temp_c)
}
female_sum_week <- cbind(female_sum_week,sum_cluster)
}
rownames(female_sum_week) <- female_cluster
colnames(female_sum_week) <- female_week
female_sum_week
barplot(t(female_sum_week),col=brewer.pal(length(female_week),"Set1"),border="white",legend.text=female_week)
par(mfrow = c(1, 2))
barplot(female_sum_week,col=FGC_color[1:4],border="white",legend.text=female_cluster)
female_sum_week_per <- t(t(female_sum_week)/colSums(female_sum_week))
barplot(female_sum_week_per,col=FGC_color[1:4],border="white")
#dev.off(
FGC_TPM <- read.table("../FGC_tpm_expr.xls",header = T, row.names = 1)
FGC_TPM <- read.table("../FGC_tpm_expr.xls",header = T, row.names = 1)
FGC_expr <- log2(FGC_TPM/10 +1)
FGC_female <- FGC_female[order(FGC_female$cluster),]
marker <- read.table("Meiotci_Markers.txt")
expr <- FGC_expr[as.character(marker$V1),as.character(rownames(FGC_female))]
pheatmap(expr,
cluster_cols = FALSE,
cluster_rows=FALSE,
show_colnames = FALSE,)
anno <- data.frame(Cluster=FGC_female$cluster)
rownames(anno) <- rownames(FGC_female)
pheatmap(expr,
cluster_cols = FALSE,
cluster_rows=FALSE,
annotation_col=anno,
show_colnames = FALSE,show_rownames = T,annotation_names_row=F,annotation_names_col=T)
bk <- seq(-2.5,2.5,length=100)
pheatmap(expr,
cluster_cols = FALSE,
cluster_rows=FALSE,
annotation_col=anno,#annotation_row=anno_r,
show_colnames = FALSE,show_rownames = T,annotation_names_row=F,annotation_names_col=T,
scale = "row",breaks=bk)
expr_scale=t(scale(t(expr)))
expr_scale[expr_scale>2.5] <- 2.5
expr_scale[expr_scale< -2.5] <- (-2.5)
pheatmap(expr_scale,
cluster_cols = FALSE,
cluster_rows=FALSE,
annotation_col=anno,#annotation_row=anno_r,
show_colnames = FALSE,show_rownames = T,annotation_names_row=F,annotation_names_col=T)
pheatmap(expr,
cluster_cols = FALSE,
cluster_rows=FALSE,
annotation_col=anno,#annotation_row=anno_r,
show_colnames = FALSE,show_rownames = T,annotation_names_row=F,annotation_names_col=T,
color=colorRampPalette(c('blue','white','red'))(100))
marker <- read.table("FGC_female_DEG_wilcox.xls",header=T)
head(marker)
head(marker)
expr <- FGC_expr[as.character(marker$gene),as.character(rownames(FGC_female))]
pheatmap(expr,
cluster_cols = FALSE,
cluster_rows=FALSE,
annotation_col=anno,
show_colnames = FALSE,show_rownames = T,annotation_names_row=F,annotation_names_col=T)
expr_new <- expr
expr_new[expr_new>10] <- 10
pheatmap(expr_new,
cluster_cols = FALSE,
cluster_rows=FALSE,
annotation_col=anno,
show_colnames = FALSE,show_rownames = T,annotation_names_row=F,annotation_names_col=T)
expr_scale=t(scale(t(expr)))
expr_scale[expr_scale>2.5] <- 2.5
expr_scale[expr_scale< -2.5] <- (-2.5)
pheatmap(expr_scale,
cluster_cols = FALSE,
cluster_rows=FALSE,
annotation_col=anno,#annotation_row=anno_r,
show_colnames = FALSE,show_rownames = T,annotation_names_row=F,annotation_names_col=T)
expr_scale[expr_scale>2] <- 2
expr_scale[expr_scale< -2] <- (-2)
pheatmap(expr_scale,
cluster_cols = FALSE,
cluster_rows=FALSE,
annotation_col=anno,#annotation_row=anno_r,
show_colnames = FALSE,show_rownames = T,annotation_names_row=F,annotation_names_col=T)
pheatmap(expr_new,
cluster_cols = FALSE,
cluster_rows=FALSE,
annotation_col=anno,
show_colnames = FALSE,show_rownames = T,annotation_names_row=F,annotation_names_col=T)
pheatmap(expr_scale,
cluster_cols = FALSE,
cluster_rows=FALSE,
annotation_col=anno,#annotation_row=anno_r,
show_colnames = FALSE,show_rownames = T,annotation_names_row=F,annotation_names_col=T,
color=colorRampPalette(c('blue','white','red'))(100))
FGC_female_expr <- FGC_expr[,as.character(rownames(FGC_female))]
library(Seurat)
FGC_female_expr_log2 <- log2(FGC_female_expr/10 + 1)
FGC_female_Seurat <- CreateSeuratObject(raw.data = as.matrix(FGC_female_expr_log2),
min.cells = 3,min.genes = 1000,
names.field = 2,is.expr = 1,
do.scale = T,do.center = T,
normalization.method = NULL,
project = "FGC_Project")
FGC_female_Seurat <- CreateSeuratObject(raw.data = as.matrix(FGC_female_expr_log2),
min.cells = 3,min.genes = 1000,
names.field = 2,is.expr = 1,
do.scale = T,do.center = T,
normalization.method = NULL,
project = "FGC_Project")
FGC_female_expr <- FGC_expr[,as.character(rownames(FGC_female))]
FGC_female_expr_log2 <- log2(FGC_female_expr/10 + 1)
FGC_female_Seurat <- CreateSeuratObject(raw.data = as.matrix(FGC_female_expr_log2),
min.cells = 3,min.genes = 1000,
names.field = 2,is.expr = 1,
do.scale = T,do.center = T,
normalization.method = NULL,
project = "FGC_Project")
FGC_female_expr_log2[1:5,1:5]
FGC_female_expr_log2[1:20,1:5]
FGC_expr[1:5,1:5]
FGC_female_Seurat <- CreateSeuratObject(raw.data = as.matrix(FGC_female_expr),
min.cells = 3,min.genes = 1000,
names.field = 2,is.expr = 1,
do.scale = T,do.center = T,
normalization.method = NULL,
project = "FGC_Project")
FGC_Seurat
FGC_female_Seurat
?CreateSeuratObject
FGC_female_Seurat@ident
head(FGC_female_Seurat@ident)
class((FGC_female_Seurat@ident))
temp <- (FGC_female_Seurat@ident)
class(temp)
as.vector(temp)
head(FGC_female_Seurat@ident)
FGC_female_Seurat@ident <- FGC_female$cluster
head(FGC_female$cluster)
unique(FGC_female$cluster)
new.cluster.ids <- factor(FGC_female$cluster,levels = unique(FGC_female$cluster))
head(new.cluster.ids)
names(new.cluster.ids) <- rownames(FGC_female)
head(new.cluster.ids)
head(new.cluster.ids)
FGC_female_Seurat@ident <- new.cluster.ids
head(FGC_female_Seurat@ident)
FGC_Seurat.markers <- FindAllMarkers(object = FGC_female_Seurat, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 1)
FGC_Seurat.markers <- FindAllMarkers(object = FGC_female_Seurat, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 1)
#write.table(FGC_Seurat.markers[FGC_Seurat.markers$p_val_adj<0.01,],"Female/FGC_female_DEG_wilcox.xls",quote = F,sep="\t",row.names = F
#write.table(FGC_Seurat.markers[FGC_Seurat.markers$p_val_adj<0.01,],"Female/FGC_female_DEG_wilcox.xls",quote = F,sep="\t",row.names = F
C_Seurat.markers %>% group_by(cluster) %>% top_n(10, avg_logFC) -> top10
DoHeatmap(FGC_Seurat.markers,
genes.use =FGC_Seurat.markers[FGC_Seurat.markers$p_val_adj<0.01,]$gene,
slim.col.label = TRUE,
remove.key = F)
source("https://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GENIE3", "RcisTarget", "AUCell"))
# Recommended to run AUCell:
biocLite(c("mixtools"))
# To visualize the binary matrices and perform t-SNEs:
biocLite(c("NMF", "Rtsne", "R2HTML"))
# To support paralell execution:
biocLite(c("doMC", "doRNG"))
install.packages("devtools")
install.packages("devtools")
devtools::install_github("aertslab/SCopeLoomR")
source("http://bioconductor.org/biocLite.R")
devtools::install_github("aertslab/SCopeLoomR")
packageVersion("AUCell")
packageVersion("RcisTarget")
packageVersion("GENIE3")
devtools::install_github("aertslab/SCENIC")
compare1 <- matrix(c(265,64,132,53),nr=2,dimnames=list(c("A","B"),c("double","single")))
compare2 <- matrix(c(265,160,132,154),nr=2,dimnames=list(c("A","C"),c("double","single")))
compare3 <- matrix(c(64,160,53,154),nr=2,dimnames=list(c("B","C"),c("double","single")))
chisq.test(compare1,correct=T)
chisq.test(compare2,correct=T)
chisq.test(compare3,correct=T)
packageurl <- "https://cran.r-project.org/src/contrib/Archive/GMD/GMD_0.3.3.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
devtools::install_github("bmbroom/tsvio")
devtools::install_github("bmbroom/NGCHMR", ref="stable")
install.packages(c('tsvio','digest'))
install.packages(c("tsvio", "digest"))
install.packages(c("tsvio", "digest"))
install.packages(c("tsvio", "digest"))
devtools::install_github("bmbroom/NGCHMR", ref="stable")
install.packages(c("tsvio"))
source("http://bioconductor.org/biocLite.R")
#biocLite("BiocGenerics")
biocLite("tsvio")
library("Rcpp")
library("Rcpp")
library(Seurat)
library(dplyr)
setwd("G:/Zhangping/New_pipeline/All_Data/FACS_Clone/FACS_ZP/")
MSC_UMI_expr <- readRDS("FACS_ZP_UMI_counts.rds")
MSC_UMI_Summary <- read.table("FACS_ZP_gene_umi_summary.xls",header=T)
sample_clean <- MSC_UMI_Summary[MSC_UMI_Summary$Gene_Number >=1000 & MSC_UMI_Summary$Transcript_Number >=10000,]
Data_UMI_clean <- MSC_UMI_expr[,as.character(sample_clean$Sample)]
pbmc <- CreateSeuratObject(raw.data = as.matrix(Data_UMI_clean), min.cells = 3, min.genes = 1000,
names.field = 1, names.delim = '.sc', project = "MSC")
mito.genes <- grep(pattern = "^MT-", x = rownames(x = pbmc@data), value = TRUE)
percent.mito <- Matrix::colSums(pbmc@raw.data[mito.genes, ])/Matrix::colSums(pbmc@raw.data)
# AddMetaData adds columns to object@meta.data, and is a great place to
# stash QC stats
pbmc <- AddMetaData(object = pbmc, metadata = percent.mito, col.name = "percent.mito")
VlnPlot(object = pbmc, features.plot = c("nGene", "nUMI", "percent.mito"), nCol = 3)
library(devtools)
devtools::install_github("tpq/propr")
devtools::install_github("tpq/propr")
devtools::install_github("tpq/propr")
install.packages("propr")
library(propr)
version("propr")
propr
?propr
#library(devtools)
#devtools::install_github("tpq/propr")
#install.packages("propr")
devtools::install_github("skinnider/dismay")
devtools::install_github("F:/the_atlas_of_human_embryonic_cells/Tanglab_Data/Network/dismay/dismay-master")
devtools::install("F:/the_atlas_of_human_embryonic_cells/Tanglab_Data/Network/dismay")
library(dismay)
?dismay
library(Seurat)
library(dplyr)
library(rgl)
130000/0/60
130000/60/60
13000/60/60
library(RSCORE)
library(Seurat)
library(igraph)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# change the directory to yours
RCA_count <- read.csv(system.file('extdata','GSE81861_Cell_Line_FPKM.csv',package = 'RSCORE'), header=T, row.names = 1)
RCA_count <- log(RCA_count+1, 2)
row_names <- strsplit(row.names(RCA_count), '_')
gene_names <- c()
for (i in 1:length(row_names)){
temp = unlist(row_names[i])
gene_names[i] = temp[2]
}
row.names(RCA_count) <- make.names(gene_names, unique=TRUE)
RCA_seurat <- CreateSeuratObject(counts = RCA_count, min.cells = 10, min.features = 1000,
names.field = 3, names.delim = '_',
assay = 'RNA', project = 'RCA')
RCA_seurat <- ScaleData(object = RCA_seurat)
RCA_count[1:5,1:5]
RCA_count <- read.csv(system.file('extdata','GSE81861_Cell_Line_FPKM.csv',package = 'RSCORE'), header=T, row.names = 1)
RCA_count[1:5,1:5]
system.file('extdata','GSE81861_Cell_Line_FPKM.csv',package = 'RSCORE')
RCA_count <- read.csv(system.file('extdata','GSE81861_Cell_Line_FPKM.csv',package = 'RSCORE'), header=T, row.names = 1)
RCA_count[1:5,1:5]
RCA_count
library(RSCORE)
library(Seurat)
library(igraph)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RSCORE)
library(Seurat)
library(igraph)
# change the directory to yours
setwd("F:/Github/HECA/RSCORE_Tutorial_for_HECA/")
Cortex <- readRDS("../Cortex_UMI_counts_filtered.rds")
FGC <- readRDS("../FGC_UMI_counts_filtered.rds")
Heart <- readRDS("../Heart_UMI_counts_filtered.rds")
Kidney <- readRDS("../Kidney_UMI_counts_filtered.rds")
PFC <- readRDS("../PFC_UMI_counts_filtered.rds")
HECA <- cbind(Cortex,FGC,Heart,Kidney,PFC)
dim(HECA)
HECA_seurat <- CreateSeuratObject(counts = HECA, min.cells = 3, min.features = 1000,
names.field = 2, names.delim = '_',
assay = 'RNA', project = 'HECA')
HECA_seurat[["percent.mt"]] <- PercentageFeatureSet(HECA_seurat, pattern = "^MT-")
# Visualize QC metrics as a violin plot
VlnPlot(HECA_seurat, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(HECA_seurat, feature1 = "nCount_RNA", feature2 = "percent.mt")
CombinePlots(plots = list(plot1, plot2))
plot1 <- FeatureScatter(HECA_seurat, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(HECA_seurat, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
# Visualize QC metrics as a violin plot
VlnPlot(HECA_seurat, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# Visualize QC metrics as a violin plot
VlnPlot(HECA_seurat, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3,pt.size = 0.1)
DMnet_seurat <- subset(DMnet_seurat, subset = nFeature_RNA > 1000 & nCount_RNA > 10000 & nCount_RNA < 1500000 & percent.mt < 20)
HECA_seurat <- subset(HECA_seurat, subset = nFeature_RNA > 1000 & nCount_RNA > 10000 & nCount_RNA < 1500000 & percent.mt < 20)
HECA_seurat <- subset(HECA_seurat, subset = nFeature_RNA > 1000 & nCount_RNA > 10000 & nCount_RNA < 1500000 & percent.mt < 20)
HECA_seurat <- NormalizeData(HECA_seurat, normalization.method = "LogNormalize", scale.factor = 100000)
HECA_seurat <- FindVariableFeatures(HECA_seurat, selection.method = "mean.var.plot",
mean.cutoff = c(0.1,Inf), dispersion.cutoff = c(0.1,Inf))
length(VariableFeatures(DMnet_seurat))
length(VariableFeatures(HECA_seurat))
HECA_seurat <- ScaleData(object = HECA_seurat)
HECA_seurat <- FindVariableFeatures(HECA_seurat, selection.method = "mean.var.plot",
mean.cutoff = c(0.1,Inf), dispersion.cutoff = c(0.1,Inf))
length(VariableFeatures(HECA_seurat))
#or
#RCA_seurat <- FindVariableFeatures(object = RCA_seurat, selection.method = 'vst', nfeatures = 8000)
HECA_seurat <- ScaleData(object = HECA_seurat)
# change the directory to yours
hs_network <- as.matrix(readRDS(system.file('extdata','hs_network_matrix_Biogrid-3.5.173.Rda',package = 'RSCORE')))
HECA_seurat <- R.SCORE(Data = HECA_seurat, PPI = hs_network)
?R.SCORE
HECA_seurat <- R.SCORE(Data = HECA_seurat, PPI = hs_network, max_step = 10, nCores = 4)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RSCORE)
library(Seurat)
library(igraph)
# change the directory to yours
setwd("F:/Github/HECA/RSCORE_Tutorial_for_HECA/")
Cortex <- readRDS("../Cortex_UMI_counts_filtered.rds")
FGC <- readRDS("../FGC_UMI_counts_filtered.rds")
Heart <- readRDS("../Heart_UMI_counts_filtered.rds")
Kidney <- readRDS("../Kidney_UMI_counts_filtered.rds")
PFC <- readRDS("../PFC_UMI_counts_filtered.rds")
HECA <- cbind(Cortex,FGC,Heart,Kidney,PFC)
dim(HECA)
HECA_seurat <- CreateSeuratObject(counts = HECA, min.cells = 3, min.features = 1000,
names.field = 2, names.delim = '_',
assay = 'RNA', project = 'HECA')
HECA_seurat[["percent.mt"]] <- PercentageFeatureSet(HECA_seurat, pattern = "^MT-")
# Visualize QC metrics as a violin plot
VlnPlot(HECA_seurat, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3,pt.size = 0.1)
HECA_seurat <- subset(HECA_seurat, subset = nFeature_RNA > 1000 & nCount_RNA > 10000 & nCount_RNA < 1500000 & percent.mt < 20)
HECA_seurat <- NormalizeData(HECA_seurat, normalization.method = "LogNormalize", scale.factor = 100000)
HECA_seurat <- FindVariableFeatures(HECA_seurat, selection.method = "mean.var.plot",
mean.cutoff = c(0.1,Inf), dispersion.cutoff = c(0.1,Inf))
length(VariableFeatures(HECA_seurat))
#or
#RCA_seurat <- FindVariableFeatures(object = RCA_seurat, selection.method = 'vst', nfeatures = 8000)
HECA_seurat <- ScaleData(object = HECA_seurat)
# change the directory to yours
hs_network <- as.matrix(readRDS(system.file('extdata','hs_network_matrix_Biogrid-3.5.173.Rda',package = 'RSCORE')))
DefaultAssay(HECA_seurat) <- "RNA"
HECA_seurat <- R.SCORE(Data = HECA_seurat, PPI = hs_network, max_step = 10, nCores = 4)
HECA_seurat <- RunPCA(HECA_seurat, features = rownames(RCA_seurat), npcs = 50, reduction.name = "NetPCA",
reduction.key = "NetPCA_", verbose = F)
HECA_seurat <- RunPCA(HECA_seurat, features = rownames(HECA_seurat), npcs = 50, reduction.name = "NetPCA",
reduction.key = "NetPCA_", verbose = F)
HECA_seurat <- RunPCA(HECA_seurat, features = rownames(HECA_seurat), npcs = 50, reduction.name = "NetPCA",
reduction.key = "NetPCA_", verbose = F)
HECA_seurat <- RunUMAP(HECA_seurat,reduction = "NetPCA", dims = 1:50,
reduction.name = "NetUMAP",  reduction.key = "NetUMAP_")
HECA_seurat <- FindNeighbors(HECA_seurat, reduction = "NetPCA",dims = 1:50,k.param = 5)
HECA_seurat <- FindClusters(HECA_seurat, resolution = 0.8)
Net_umap_cluster <- DimPlot(HECA_seurat, reduction = "NetUMAP", pt.size = 1,label = T)
Net_umap_origin <- DimPlot(HECA_seurat, reduction = "NetUMAP", pt.size = 1, group.by = 'orig.ident',label = T)
CombinePlots(plots = list(Net_umap_origin, Net_umap_cluster))
rownames(HECA_seurat)
HECA_seurat <- RunPCA(HECA_seurat, features = rownames(HECA_seurat), assay = "Net", npcs = 50, reduction.name = "NetPCA",
reduction.key = "NetPCA_", verbose = F)
HECA_seurat <- RunPCA(HECA_seurat, features = rownames(HECA_seurat), assay = "Net", npcs = 50, reduction.name = "NetPCA",
reduction.key = "NetPCA_", verbose = F)
HECA_seurat <- RunUMAP(HECA_seurat,reduction = "NetPCA", dims = 1:50,
reduction.name = "NetUMAP",  reduction.key = "NetUMAP_")
HECA_seurat <- FindNeighbors(HECA_seurat, reduction = "NetPCA",dims = 1:50,k.param = 5)
HECA_seurat <- FindNeighbors(HECA_seurat, reduction = "NetPCA",dims = 1:50,k.param = 5)
HECA_seurat <- FindClusters(HECA_seurat, resolution = 0.8)
Net_umap_cluster <- DimPlot(HECA_seurat, reduction = "NetUMAP", pt.size = 1,label = T)
CombinePlots(plots = list(Net_umap_origin, Net_umap_cluster))
FeaturePlot(HECA_seurat, reduction = "NetUMAP", c('PTPRC','ALAS2','CDH5'))
dev.off()
FeaturePlot(HECA_seurat, reduction = "NetUMAP", c('PTPRC','ALAS2','CDH5'))
FeaturePlot(HECA_seurat, reduction = "NetUMAP", c('PTPRC','ALAS2','CDH5','PECAM1'))
rm(list=ls())
source("F:/DM-Net/RSCORE-master/getPPI_Biogrid_revised.R")
setwd("F:/Github/HECA/RSCORE_Tutorial_for_HECA/")
hs_ppi_3.5.174 <- getPPI_Biogrid()
dim(hs_ppi_3.5.174)
ppi_all <- read.table("BIOGRID-ALL-3.5.174.tab2.txt",header=T)
ppi_all <- read.csv("BIOGRID-ALL-3.5.174.tab2.txt",header=T,sep = "\t")
head(ppi_all)
species = 9606
species_coincide <- ppi_all[,'Organism.Interactor.A'] == species & ppi_all[,'Organism.Interactor.B'] == species & ppi_all[,'Experimental.System.Type'] == 'physical'
species_coincide
PPI = PPI[species_coincide,]
PPI = ppi_all[species_coincide,]
dim(PPI)
head(PPI)
gene_name <- union(PPI[,'Official.Symbol.Interactor.A'],PPI[,'Official.Symbol.Interactor.B'])
gene_name
length(gene_name)
ppi_hs <- read.csv("BIOGRID-ORGANISM-Homo_sapiens-3.5.174.tab2.txt",header=T,sep = "\t")
head(ppi_hs)
species_coincide <- ppi_hs[,'Experimental.System.Type'] == 'physical'
PPI = ppi_hs[species_coincide,]
gene_name <- union(PPI[,'Official.Symbol.Interactor.A'],PPI[,'Official.Symbol.Interactor.B'])
length(gene_name)
nodes <- gene_name
links <- PPI[,c('Official.Symbol.Interactor.A','Official.Symbol.Interactor.B')]
net <- graph_from_data_frame(d = links,vertices = nodes,directed = FALSE)
net <- igraph::simplify(net)
ppi_net <- as.matrix(as_adj(net))
dim(ppi_net)
ppi_net[1:5,1:5]
dim(ppi_net)
ppi_net[1:5,1:5]
biogrid_version = '3.5.174'
saveRDS(ppi_net,paste('hs_ppi_matrix_BioGRID-',biogrid_version,'.Rda',sep=""))
saveRDS(as_adj(net),paste('hs_ppi_matrix_BioGRID-',biogrid_version,'_igraph.Rda',sep=""))
PPI$Systematic.Name.Interactor.A
PPI$Organism.Interactor.B
unique(PPI$Organism.Interactor.B)
head(PPI)
PPT[PPI$Organism.Interactor.A=='10090',]
PPI[PPI$Organism.Interactor.A=='10090',]
biogrid_version = '3.5.174'
species = 9606
species_coincide <- ppi_hs[,'Organism.Interactor.A'] == species & ppi_hs[,'Organism.Interactor.B'] == species & ppi_hs[,'Experimental.System.Type'] == 'physical'
PPI = ppi_hs[species_coincide,]
gene_name <- union(PPI[,'Official.Symbol.Interactor.A'],PPI[,'Official.Symbol.Interactor.B'])
unique(gene_name)
length(unique(gene_name))
source("F:/DM-Net/RSCORE-master/getPPI_Biogrid_revised.R")
source("F:/DM-Net/RSCORE-master/getPPI_Biogrid_revised.R")
setwd("F:/Github/HECA/RSCORE_Tutorial_for_HECA/")
hs_ppi_3.5.174 <- getPPI_Biogrid()
hs_ppi_3.5.174[1:5,1:5]
dim(hs_ppi_3.5.174)
library(RSCORE)
library(Seurat)
library(igraph)
library(dplyr)
library(genesorteR)
# change the directory to yours
hs_network <- as.matrix(readRDS("hs_ppi_matrix_BioGRID-3.5.174.Rda"))
