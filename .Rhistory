library(RSCORE)
library(Seurat)
library(igraph)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# change the directory to yours
RCA_count <- read.csv(system.file('extdata','GSE81861_Cell_Line_FPKM.csv',package = 'RSCORE'), header=T, row.names = 1)
RCA_count <- log(RCA_count+1, 2)
row_names <- strsplit(row.names(RCA_count), '_')
gene_names <- c()
for (i in 1:length(row_names)){
temp = unlist(row_names[i])
gene_names[i] = temp[2]
}
row.names(RCA_count) <- make.names(gene_names, unique=TRUE)
RCA_seurat <- CreateSeuratObject(counts = RCA_count, min.cells = 10, min.features = 1000,
names.field = 3, names.delim = '_',
assay = 'RNA', project = 'RCA')
RCA_seurat <- ScaleData(object = RCA_seurat)
RCA_count[1:5,1:5]
RCA_count <- read.csv(system.file('extdata','GSE81861_Cell_Line_FPKM.csv',package = 'RSCORE'), header=T, row.names = 1)
RCA_count[1:5,1:5]
system.file('extdata','GSE81861_Cell_Line_FPKM.csv',package = 'RSCORE')
RCA_count <- read.csv(system.file('extdata','GSE81861_Cell_Line_FPKM.csv',package = 'RSCORE'), header=T, row.names = 1)
RCA_count[1:5,1:5]
RCA_count
library(RSCORE)
library(Seurat)
library(igraph)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RSCORE)
library(Seurat)
library(igraph)
# change the directory to yours
setwd("F:/Github/HECA/RSCORE_Tutorial_for_HECA/")
Cortex <- readRDS("../Cortex_UMI_counts_filtered.rds")
FGC <- readRDS("../FGC_UMI_counts_filtered.rds")
Heart <- readRDS("../Heart_UMI_counts_filtered.rds")
Kidney <- readRDS("../Kidney_UMI_counts_filtered.rds")
PFC <- readRDS("../PFC_UMI_counts_filtered.rds")
HECA <- cbind(Cortex,FGC,Heart,Kidney,PFC)
dim(HECA)
HECA_seurat <- CreateSeuratObject(counts = HECA, min.cells = 3, min.features = 1000,
names.field = 2, names.delim = '_',
assay = 'RNA', project = 'HECA')
HECA_seurat[["percent.mt"]] <- PercentageFeatureSet(HECA_seurat, pattern = "^MT-")
# Visualize QC metrics as a violin plot
VlnPlot(HECA_seurat, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(HECA_seurat, feature1 = "nCount_RNA", feature2 = "percent.mt")
CombinePlots(plots = list(plot1, plot2))
plot1 <- FeatureScatter(HECA_seurat, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(HECA_seurat, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
# Visualize QC metrics as a violin plot
VlnPlot(HECA_seurat, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# Visualize QC metrics as a violin plot
VlnPlot(HECA_seurat, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3,pt.size = 0.1)
DMnet_seurat <- subset(DMnet_seurat, subset = nFeature_RNA > 1000 & nCount_RNA > 10000 & nCount_RNA < 1500000 & percent.mt < 20)
HECA_seurat <- subset(HECA_seurat, subset = nFeature_RNA > 1000 & nCount_RNA > 10000 & nCount_RNA < 1500000 & percent.mt < 20)
HECA_seurat <- subset(HECA_seurat, subset = nFeature_RNA > 1000 & nCount_RNA > 10000 & nCount_RNA < 1500000 & percent.mt < 20)
HECA_seurat <- NormalizeData(HECA_seurat, normalization.method = "LogNormalize", scale.factor = 100000)
HECA_seurat <- FindVariableFeatures(HECA_seurat, selection.method = "mean.var.plot",
mean.cutoff = c(0.1,Inf), dispersion.cutoff = c(0.1,Inf))
length(VariableFeatures(DMnet_seurat))
length(VariableFeatures(HECA_seurat))
HECA_seurat <- ScaleData(object = HECA_seurat)
HECA_seurat <- FindVariableFeatures(HECA_seurat, selection.method = "mean.var.plot",
mean.cutoff = c(0.1,Inf), dispersion.cutoff = c(0.1,Inf))
length(VariableFeatures(HECA_seurat))
#or
#RCA_seurat <- FindVariableFeatures(object = RCA_seurat, selection.method = 'vst', nfeatures = 8000)
HECA_seurat <- ScaleData(object = HECA_seurat)
# change the directory to yours
hs_network <- as.matrix(readRDS(system.file('extdata','hs_network_matrix_Biogrid-3.5.173.Rda',package = 'RSCORE')))
HECA_seurat <- R.SCORE(Data = HECA_seurat, PPI = hs_network)
?R.SCORE
HECA_seurat <- R.SCORE(Data = HECA_seurat, PPI = hs_network, max_step = 10, nCores = 4)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RSCORE)
library(Seurat)
library(igraph)
# change the directory to yours
setwd("F:/Github/HECA/RSCORE_Tutorial_for_HECA/")
Cortex <- readRDS("../Cortex_UMI_counts_filtered.rds")
FGC <- readRDS("../FGC_UMI_counts_filtered.rds")
Heart <- readRDS("../Heart_UMI_counts_filtered.rds")
Kidney <- readRDS("../Kidney_UMI_counts_filtered.rds")
PFC <- readRDS("../PFC_UMI_counts_filtered.rds")
HECA <- cbind(Cortex,FGC,Heart,Kidney,PFC)
dim(HECA)
HECA_seurat <- CreateSeuratObject(counts = HECA, min.cells = 3, min.features = 1000,
names.field = 2, names.delim = '_',
assay = 'RNA', project = 'HECA')
HECA_seurat[["percent.mt"]] <- PercentageFeatureSet(HECA_seurat, pattern = "^MT-")
# Visualize QC metrics as a violin plot
VlnPlot(HECA_seurat, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3,pt.size = 0.1)
HECA_seurat <- subset(HECA_seurat, subset = nFeature_RNA > 1000 & nCount_RNA > 10000 & nCount_RNA < 1500000 & percent.mt < 20)
HECA_seurat <- NormalizeData(HECA_seurat, normalization.method = "LogNormalize", scale.factor = 100000)
HECA_seurat <- FindVariableFeatures(HECA_seurat, selection.method = "mean.var.plot",
mean.cutoff = c(0.1,Inf), dispersion.cutoff = c(0.1,Inf))
length(VariableFeatures(HECA_seurat))
#or
#RCA_seurat <- FindVariableFeatures(object = RCA_seurat, selection.method = 'vst', nfeatures = 8000)
HECA_seurat <- ScaleData(object = HECA_seurat)
# change the directory to yours
hs_network <- as.matrix(readRDS(system.file('extdata','hs_network_matrix_Biogrid-3.5.173.Rda',package = 'RSCORE')))
DefaultAssay(HECA_seurat) <- "RNA"
HECA_seurat <- R.SCORE(Data = HECA_seurat, PPI = hs_network, max_step = 10, nCores = 4)
HECA_seurat <- RunPCA(HECA_seurat, features = rownames(RCA_seurat), npcs = 50, reduction.name = "NetPCA",
reduction.key = "NetPCA_", verbose = F)
HECA_seurat <- RunPCA(HECA_seurat, features = rownames(HECA_seurat), npcs = 50, reduction.name = "NetPCA",
reduction.key = "NetPCA_", verbose = F)
HECA_seurat <- RunPCA(HECA_seurat, features = rownames(HECA_seurat), npcs = 50, reduction.name = "NetPCA",
reduction.key = "NetPCA_", verbose = F)
HECA_seurat <- RunUMAP(HECA_seurat,reduction = "NetPCA", dims = 1:50,
reduction.name = "NetUMAP",  reduction.key = "NetUMAP_")
HECA_seurat <- FindNeighbors(HECA_seurat, reduction = "NetPCA",dims = 1:50,k.param = 5)
HECA_seurat <- FindClusters(HECA_seurat, resolution = 0.8)
Net_umap_cluster <- DimPlot(HECA_seurat, reduction = "NetUMAP", pt.size = 1,label = T)
Net_umap_origin <- DimPlot(HECA_seurat, reduction = "NetUMAP", pt.size = 1, group.by = 'orig.ident',label = T)
CombinePlots(plots = list(Net_umap_origin, Net_umap_cluster))
rownames(HECA_seurat)
HECA_seurat <- RunPCA(HECA_seurat, features = rownames(HECA_seurat), assay = "Net", npcs = 50, reduction.name = "NetPCA",
reduction.key = "NetPCA_", verbose = F)
HECA_seurat <- RunPCA(HECA_seurat, features = rownames(HECA_seurat), assay = "Net", npcs = 50, reduction.name = "NetPCA",
reduction.key = "NetPCA_", verbose = F)
HECA_seurat <- RunUMAP(HECA_seurat,reduction = "NetPCA", dims = 1:50,
reduction.name = "NetUMAP",  reduction.key = "NetUMAP_")
HECA_seurat <- FindNeighbors(HECA_seurat, reduction = "NetPCA",dims = 1:50,k.param = 5)
HECA_seurat <- FindNeighbors(HECA_seurat, reduction = "NetPCA",dims = 1:50,k.param = 5)
HECA_seurat <- FindClusters(HECA_seurat, resolution = 0.8)
Net_umap_cluster <- DimPlot(HECA_seurat, reduction = "NetUMAP", pt.size = 1,label = T)
CombinePlots(plots = list(Net_umap_origin, Net_umap_cluster))
FeaturePlot(HECA_seurat, reduction = "NetUMAP", c('PTPRC','ALAS2','CDH5'))
dev.off()
FeaturePlot(HECA_seurat, reduction = "NetUMAP", c('PTPRC','ALAS2','CDH5'))
FeaturePlot(HECA_seurat, reduction = "NetUMAP", c('PTPRC','ALAS2','CDH5','PECAM1'))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RSCORE)
library(Seurat)
library(igraph)
library(dplyr)
library(genesorteR)
# change the directory to yours
setwd("F:/Github/HECA/RSCORE_Tutorial_for_HECA/")
Cortex <- readRDS("../Cortex_UMI_counts_filtered.rds")
FGC <- readRDS("../FGC_UMI_counts_filtered.rds")
Heart <- readRDS("../Heart_UMI_counts_filtered.rds")
Kidney <- readRDS("../Kidney_UMI_counts_filtered.rds")
PFC <- readRDS("../PFC_UMI_counts_filtered.rds")
#combine all the five datasets
HECA <- cbind(Cortex,FGC,Heart,Kidney,PFC)
#check the data size
dim(HECA)
HECA_seurat <- CreateSeuratObject(counts = as.matrix(HECA), min.cells = 3, min.features = 1000,
names.field = 2, names.delim = '_',
assay = 'RNA', project = 'HECA')
HECA_seurat[["percent.mt"]] <- PercentageFeatureSet(HECA_seurat, pattern = "^MT-")
# Visualize QC metrics as a violin plot
VlnPlot(HECA_seurat, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3,pt.size = 0.1)
HECA_seurat <- subset(HECA_seurat, subset = nFeature_RNA > 1000 & nCount_RNA > 10000 & nCount_RNA < 1500000 & percent.mt < 20)
HECA_seurat <- NormalizeData(HECA_seurat, normalization.method = "LogNormalize", scale.factor = 100000)
HECA_seurat <- FindVariableFeatures(HECA_seurat, selection.method = "mean.var.plot",
mean.cutoff = c(0.1,Inf), dispersion.cutoff = c(0.1,Inf))
#HECA_seurat <- FindVariableFeatures(object = HECA_seurat, selection.method = 'vst', nfeatures = 10000)
#check the number of selected genes
length(VariableFeatures(HECA_seurat))
HECA_seurat <- ScaleData(object = HECA_seurat)
# change the directory to yours
hs_network <- as.matrix(readRDS("hs_ppi_matrix_BioGRID-3.5.174.Rda"))
#build a BioGRID homo sapien PPI, the PPI matrix is saved in the working directory
#hs_network <- as.matrix(getPPI_Biogrid())
DefaultAssay(HECA_seurat) <- "RNA"
HECA_seurat <- R.SCORE(Data = HECA_seurat, PPI = hs_network, max_step = 10, nCores = 4)
HECA_seurat <- RunPCA(HECA_seurat, features = rownames(HECA_seurat), assay = "Net", npcs = 50,
reduction.name = "NetPCA", reduction.key = "NetPCA_", verbose = F)
HECA_seurat <- RunUMAP(HECA_seurat, reduction = "NetPCA", dims = 1:50,
reduction.name = "NetUMAP",  reduction.key = "NetUMAP_")
HECA_seurat <- FindNeighbors(HECA_seurat, reduction = "NetPCA",dims = 1:50,k.param = 10)
HECA_seurat <- FindClusters(HECA_seurat, resolution = 0.8)
Net_umap_cluster <- DimPlot(HECA_seurat, reduction = "NetUMAP", pt.size = 1,label = T)
Net_umap_origin <- DimPlot(HECA_seurat, reduction = "NetUMAP", pt.size = 1, group.by = 'orig.ident',label = T)
CombinePlots(plots = list(Net_umap_origin, Net_umap_cluster))
FeaturePlot(HECA_seurat, reduction = "NetUMAP", c('PTPRC','ALAS2','CDH5','PECAM1'))
#Identify the DEGs using genesorteR
SCORE_DEGs_list <- Find_Markers(object = HECA_seurat, assay = 'RNA', FoldChange = 1.5)
table(SCORE_DEGs_list$Markers$Cluster)
SCORE_DAMs_list <- Find_Markers(object = HECA_seurat, assay = 'Net', FoldChange = 1.5)
table(SCORE_DAMs_list$Markers$Cluster)
top10_DEGs <- SCORE_DEGs_list$Markers %>% group_by(Cluster) %>% top_n(n = 20, wt = Gene.Score)
#genesorteR plotMarkerHeat function
plotMarkerHeat(exp = SCORE_DEGs_list$GeneSort$inputMat,
classes = SCORE_DEGs_list$GeneSort$inputClass,
markers = top10_DEGs$Marker,
clusterGenes = FALSE,
averageCells = 1)
top10_DAMs <- SCORE_DAMs_list$Markers %>% group_by(Cluster) %>% top_n(n = 20, wt = Gene.Score)
plotMarkerHeat(exp = SCORE_DAMs_list$GeneSort$inputMat,
classes = SCORE_DAMs_list$GeneSort$inputClass,
markers = top10_DAMs$Marker,
clusterGenes = FALSE,
averageCells = 1)
PlotSteinertree(HECA_seurat, ident = '0')
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RSCORE)
library(Seurat)
library(igraph)
library(dplyr)
library(genesorteR)
# change the directory to yours
setwd("F:/Github/HECA/RSCORE_Tutorial_for_HECA/")
Cortex <- readRDS("../Cortex_UMI_counts_filtered.rds")
FGC <- readRDS("../FGC_UMI_counts_filtered.rds")
Heart <- readRDS("../Heart_UMI_counts_filtered.rds")
Kidney <- readRDS("../Kidney_UMI_counts_filtered.rds")
PFC <- readRDS("../PFC_UMI_counts_filtered.rds")
#combine all the five datasets
HECA <- cbind(Cortex,FGC,Heart,Kidney,PFC)
#check the data size
dim(HECA)
HECA_seurat <- CreateSeuratObject(counts = as.matrix(HECA), min.cells = 3, min.features = 1000,
names.field = 2, names.delim = '_',
assay = 'RNA', project = 'HECA')
library(RSCORE)
library(Seurat)
library(igraph)
library(dplyr)
library(ggplot2)
library(genesorteR)
1165980920 - 165981784
165980920 - 165981784
73762231-73762614
#BiocManager::install("doMC")
devtools::install_github("wycwycpku/RSCORE")
hs_network <- as.matrix(readRDS("F:/DM-Net/Biogrid/9606_ppi_matrix_BioGRID-3.5.173.Rda"))
hs_network <- getPPI_Biogrid(object = RCA_seurat, species = 9606, version = '3.5.175')
library(rgl)
library(Seurat)
library(dplyr)
library(Matrix)
library(RColorBrewer)
library(gplots)
library(harmony)
library(RSCORE)
library(genesorteR)
rm(list=ls())
hs_network <- getPPI_Biogrid(object = RCA_seurat, species = 9606, version = '3.5.175')
system.file('extdata','9606_ppi_matrix_BioGRID-3.5.173.Rda',package = 'RSCORE')
hs_network <- getPPI_Biogrid(object = NULL, species = 9606, version = '3.5.175')
#install.packages('devtools')
devtools::install_github("hr1912/TreeExp")
BiocManager::install("phytools")
#install.packages('devtools')
devtools::install_github("hr1912/TreeExp")
library(rgl)
setwd("F:/Small_intestine_cancer/10X/Combine/All_Genes/New_Clusters/All_Clusters/big_group/")
library(rgl)
library(Seurat)
library(dplyr)
library(Matrix)
library(RColorBrewer)
library(gplots)
library(harmony)
library(RSCORE)
library(genesorteR)
rm(list=ls())
setwd("F:/Small_intestine_cancer/10X/Combine/All_Genes/New_Clusters/All_Clusters/big_group/")
library(rgl)
library(Seurat)
library(dplyr)
library(Matrix)
library(RColorBrewer)
library(gplots)
library(harmony)
library(RSCORE)
library(genesorteR)
rm(list=ls())
setwd("F:/Small_intestine_cancer/10X/")
library(rgl)
library(Seurat)
library(dplyr)
library(Matrix)
library(RColorBrewer)
library(gplots)
library(harmony)
library(RSCORE)
library(genesorteR)
rm(list=ls())
hs_network <- as.matrix(readRDS("F:/Github/HECA/9606_ppi_matrix_BioGRID-3.5.173.Rda"))
SI_1_data <- Read10X(data.dir = "F:/Small_intestine_cancer/10X/SI_1_combine/filtered_feature_bc_matrix/")
SI_1 <- CreateSeuratObject(counts = SI_1_data, project = "SI1")
SI_1
SI_2_data <- Read10X(data.dir = "F:/Small_intestine_cancer/10X/SI_2_combine/filtered_feature_bc_matrix/")
SI_2 <- CreateSeuratObject(counts = SI_2_data, project = "SI2")
SI_2
DMnet_seurat <- merge(SI_1, y = c(SI_2), add.cell.ids = c("SI1", "SI2"), project = "SI")
head(DMnet_seurat[[]])
setwd("F:/Small_intestine_cancer/10X/")
library(rgl)
library(Seurat)
library(dplyr)
library(Matrix)
library(RColorBrewer)
library(gplots)
library(harmony)
library(RSCORE)
library(genesorteR)
rm(list=ls())
hs_network <- as.matrix(readRDS("F:/Github/HECA/9606_ppi_matrix_BioGRID-3.5.173.Rda"))
SI_1_data <- Read10X(data.dir = "F:/Small_intestine_cancer/10X/SI_1_combine/filtered_feature_bc_matrix/")
SI_1 <- CreateSeuratObject(counts = SI_1_data, project = "SI1")
SI_1
SI_2_data <- Read10X(data.dir = "F:/Small_intestine_cancer/10X/SI_2_combine/filtered_feature_bc_matrix/")
70*12*15
1170*12
devtools::install_github(repo = 'mojaveazure/loomR', ref = 'develop')
library(Seurat)
#library(SeuratData)
library(ggplot2)
library(future)
plan("multiprocess", workers = 4)
setwd("F:/EC_Revised/Revision/expr_reorganization/")
rm(list=ls())
data_h_final <- readRDS("data_h_final.Rda")
data_m_final <- readRDS("data_m_final.Rda")
batch <- c(rep('human',ncol(data_h_final)),rep('mouse',ncol(data_m_final)))
names(batch) <- c(paste('human',colnames(data_h_final),sep = "_"),paste('mouse',colnames(data_m_final),sep = "_"))
umi_hm <- cbind(data_h_final,data_m_final)
####human###
human_STRT <- CreateSeuratObject(counts = as.matrix(data_h_final), names.field = 1,names.delim = "_",
min.cells = 0, min.features = 1000,
assay = 'RNA',project = "human")
human_STRT
human_STRT[["percent.mt"]] <- PercentageFeatureSet(human_STRT, pattern = "^mt-")
# Visualize QC metrics as a violin plot
VlnPlot(human_STRT, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
human_STRT <- subset(human_STRT, subset = nFeature_RNA > 2000 & nCount_RNA > 10000)
###mouse###
mouse_STRT <- CreateSeuratObject(counts = as.matrix(data_m_final), names.field = 1,names.delim = "_",
min.cells = 0, min.features = 1000,
assay = 'RNA',project = "mouse")
mouse_STRT
mouse_STRT[["percent.mt"]] <- PercentageFeatureSet(mouse_STRT, pattern = "^mt-")
# Visualize QC metrics as a violin plot
VlnPlot(mouse_STRT, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
mouse_STRT <- subset(mouse_STRT, subset = nFeature_RNA > 2000 & nCount_RNA > 100000)
##########Merge#############
combine_STRT <- merge(mouse_STRT, y = c(human_STRT), add.cell.ids = c("mouse","human"), project = "STRT")
combine_STRT
mouse_STRT
human_STRT
head(combine_STRT[[]])
combine_STRT$data_type <- batch[colnames(combine_STRT)]
pancreas.list <- SplitObject(combine_STRT, split.by = "data_type")
for (i in 1:length(pancreas.list)) {
pancreas.list[[i]] <- NormalizeData(pancreas.list[[i]], scale.factor = 100000, verbose = FALSE)
pancreas.list[[i]] <- FindVariableFeatures(pancreas.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = FALSE)
}
pancreas.anchors <- FindIntegrationAnchors(object.list = pancreas.list, dims = 1:30)
plan("multiprocess", workers = 1)
pancreas.anchors <- FindIntegrationAnchors(object.list = pancreas.list, dims = 1:30)
plan("multiprocess", workers = 4)
library(ggplot2)
library(cowplot)
# switch to integrated assay. The variable features of this assay are automatically
# set during IntegrateData
DefaultAssay(pancreas.integrated) <- "integrated"
pancreas.integrated <- IntegrateData(anchorset = pancreas.anchors, dims = 1:30)
# switch to integrated assay. The variable features of this assay are automatically
# set during IntegrateData
DefaultAssay(pancreas.integrated) <- "integrated"
# Run the standard workflow for visualization and clustering
pancreas.integrated <- ScaleData(pancreas.integrated, verbose = FALSE)
pancreas.integrated <- RunPCA(pancreas.integrated, npcs = 30, verbose = FALSE)
pancreas.integrated <- RunUMAP(pancreas.integrated, reduction = "pca", dims = 1:30)
DimPlot(pancreas.integrated, reduction = "umap", group.by = "data_type")
pbmc.list <- SplitObject(combine_STRT, split.by = "data_type")
for (i in names(pbmc.list)) {
pbmc.list[[i]] <- SCTransform(pbmc.list[[i]], verbose = FALSE)
}
pbmc.features <- SelectIntegrationFeatures(object.list = pbmc.list, nfeatures = 3000)
pbmc.list <- PrepSCTIntegration(object.list = pbmc.list, anchor.features = pbmc.features)
plan("multiprocess", workers = 1)
pbmc.list <- PrepSCTIntegration(object.list = pbmc.list, anchor.features = pbmc.features)
plan("multiprocess", workers = 4)
# This command returns dataset 5.  We can also specify multiple refs. (i.e. c(5,6))
reference_dataset <- which(names(pbmc.list) == "mouse")
pbmc.anchors <- FindIntegrationAnchors(object.list = pbmc.list, normalization.method = "SCT",
anchor.features = pbmc.features, reference = reference_dataset)
plan("multiprocess", workers = 1)
pbmc.anchors <- FindIntegrationAnchors(object.list = pbmc.list, normalization.method = "SCT",
anchor.features = pbmc.features, reference = reference_dataset)
pbmc.integrated <- IntegrateData(anchorset = pbmc.anchors, normalization.method = "SCT")
pbmc.integrated <- RunPCA(object = pbmc.integrated, verbose = FALSE)
plan("multiprocess", workers = 4)
pbmc.integrated <- RunUMAP(object = pbmc.integrated, dims = 1:30)
DimPlot(pbmc.integrated, group.by = c("data_type"), combine = FALSE)
DefaultAssay(pbmc.integrated) <- "RNA"
# Normalize RNA data for visualization purposes
pbmc.integrated <- NormalizeData(pbmc.integrated, verbose = FALSE)
DefaultAssay(pbmc.integrated) <- "RNA"
# Normalize RNA data for visualization purposes
pbmc.integrated <- NormalizeData(pbmc.integrated, scale.factor = 100000, verbose = FALSE)
saveRDS(pbmc.integrated,"CCA_human_mouse.integrated.Rda")
plan("multiprocess", workers = 1)
DefaultAssay(pbmc.integrated) <- "RNA"
# Normalize RNA data for visualization purposes
pbmc.integrated <- NormalizeData(pbmc.integrated, scale.factor = 100000, verbose = FALSE)
FeaturePlot(pbmc.integrated, c("Pecam1","Nrp1","Etv2","Cyp26a1","Dll4","Gja4","Runx1","Gfi1","Eln","Aplnr","Nr2f2","Prdm1"))
?SCTransform
pbmc.features <- SelectIntegrationFeatures(object.list = pbmc.list, nfeatures = 2000)
pbmc.list <- PrepSCTIntegration(object.list = pbmc.list, anchor.features = pbmc.features)
# This command returns dataset 5.  We can also specify multiple refs. (i.e. c(5,6))
reference_dataset <- which(names(pbmc.list) == "mouse")
pbmc.anchors <- FindIntegrationAnchors(object.list = pbmc.list, normalization.method = "SCT",
anchor.features = pbmc.features, reference = reference_dataset)
?SelectIntegrationFeatures
?PrepSCTIntegration
?FindIntegrationAnchors
?IntegrateData
pbmc.integrated <- IntegrateData(anchorset = pbmc.anchors, normalization.method = "SCT")
plan("multiprocess", workers = 4)
pbmc.integrated <- RunPCA(object = pbmc.integrated, verbose = FALSE)
pbmc.integrated <- RunUMAP(object = pbmc.integrated, dims = 1:30)
DimPlot(pbmc.integrated, group.by = c("data_type"), combine = FALSE)
pbmc.integrated <- RunUMAP(object = pbmc.integrated, dims = 1:10)
DimPlot(pbmc.integrated, group.by = c("data_type"), combine = FALSE)
FeaturePlot(pbmc.integrated, c("Pecam1","Nrp1","Etv2","Cyp26a1","Dll4","Gja4","Runx1","Gfi1","Eln","Aplnr","Nr2f2","Prdm1"))
DefaultAssay(pbmc.integrated) <- "RNA"
plan("multiprocess", workers = 1)
# Normalize RNA data for visualization purposes
pbmc.integrated <- NormalizeData(pbmc.integrated, scale.factor = 100000, verbose = FALSE)
FeaturePlot(pbmc.integrated, c("Pecam1","Nrp1","Etv2","Cyp26a1","Dll4","Gja4","Runx1","Gfi1","Eln","Aplnr","Nr2f2","Prdm1"))
plan("multiprocess", workers = 4)
pbmc.integrated <- RunUMAP(object = pbmc.integrated, dims = 1:20)
DimPlot(pbmc.integrated, group.by = c("data_type"), combine = FALSE)
pbmc.integrated <- RunUMAP(object = pbmc.integrated, dims = 1:15)
DimPlot(pbmc.integrated, group.by = c("data_type"), combine = FALSE)
pbmc.integrated <- RunUMAP(object = pbmc.integrated, dims = 1:50)
DimPlot(pbmc.integrated, group.by = c("data_type"), combine = FALSE)
pbmc.integrated <- RunUMAP(object = pbmc.integrated, dims = 1:30)
FeaturePlot(mouse_combine,reduction = "umap",
c("Aplnr","Vwa1","Mki67","Cdh5"))
FeaturePlot(pbmc.integrated,reduction = "umap",
c("Aplnr","Vwa1","Mki67","Cdh5"))
FeaturePlot(pbmc.integrated,reduction = "umap",
c("Etv2","Cyp26a1","Gja4","Runx1","Nr2f2","Prdm1"))
FeaturePlot(pbmc.integrated,reduction = "umap",
c("Pecam1"))
FeaturePlot(pbmc.integrated,reduction = "umap",
c("Pecam1","Tal1"))
dev.off()
FeaturePlot(pbmc.integrated, c("Pecam1","Nrp1","Etv2","Cyp26a1","Dll4","Gja4","Runx1","Gfi1","Eln","Aplnr","Nr2f2","Prdm1"))
pbmc.integrated <- RunUMAP(object = pbmc.integrated, dims = 1:10)
FeaturePlot(pbmc.integrated,reduction = "umap",
c("Etv2","Cyp26a1","Gja4","Runx1","Nr2f2","Prdm1"))
DimPlot(pbmc.integrated, group.by = c("data_type"), combine = FALSE)
pbmc.integrated <- RunUMAP(object = pbmc.integrated, dims = 1:50)
FeaturePlot(pbmc.integrated,reduction = "umap",
c("Etv2","Cyp26a1","Gja4","Runx1","Nr2f2","Prdm1"))
pbmc.integrated <- RunUMAP(object = pbmc.integrated, dims = 1:10)
DimPlot(pbmc.integrated, group.by = c("data_type"), combine = FALSE)
png("UMAP_CCA_Marker_genes.png",1200,800)
FeaturePlot(pbmc.integrated, c("Pecam1","Nrp1","Etv2","Cyp26a1","Dll4","Gja4","Runx1","Gfi1","Eln","Aplnr","Nr2f2","Prdm1"))
dev.off()
library(RSCORE)
library(Seurat)
library(igraph)
library(dplyr)
library(ggplot2)
library(genesorteR)
library(rgl)
library(Seurat)
library(dplyr)
library(Matrix)
library(RColorBrewer)
library(gplots)
setwd("G:/Zhangping/10X/New_cluster")
load("MSC_10X_harmony_new.Robj")
setwd("G:/Zhangping/10X/New_cluster/V3/")
load("MSC_10X_DMnet_seurat_V3.Rda")
rm(list=ls())
load("MSC_10X_DMnet_seurat_V3.Rda")
MSC_10X <- readRDS("MSC_10X_DMnet_seurat_V3.Rda")
DimPlot(MSC_10X, reduction = "umap", pt.size = 1,label = T)
FeaturePlot(object = MSC_10X, features.plot = c('TM4SF1','CD44','NT5E','STEAP4'),
reduction.use = 'pca',dim.1 = 3,dim.2 = 4,
cols.use = c("lightgrey", "blue"), pt.size = 1,no.legend = F)
FeaturePlot(object = MSC_10X, features.plot = c('TM4SF1','CD44','NT5E','STEAP4'),
reduction.use = 'umap',cols.use = c("lightgrey", "blue"), pt.size = 1,no.legend = F)
FeaturePlot(MSC_10X, reduction = "umap", c('TM4SF1','CD44','NT5E','STEAP4'), pt.size = 1,no.legend = F)
FeaturePlot(MSC_10X, reduction = "umap", c('TM4SF1','CD44','NT5E','STEAP4'), pt.size = 1)
getwd()
rm(list=ls())
setwd("F:/Github/HECA/")
hs_network <- getPPI_Biogrid(object = NULL, version = "3.5.178", species = 9606,
save = T)
